@page "/inventory"
@rendermode InteractiveServer
@inject InventoryService InventoryService
@using InventoryMLApp.Services
@using InventoryMLApp.Models

<PageTitle>üì¶ Inventory Management</PageTitle>

<h1>üì¶ Inventory Management</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>‚ùå Error:</strong> @errorMessage
        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="ClearError">Clear</button>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success" role="alert">
        <strong>‚úÖ Success:</strong> @successMessage
    </div>
}

<!-- Database Status -->
<div class="card mb-3">
    <div class="card-body">
        <h6 class="card-title">üóÑÔ∏è Database Status</h6>
        <p class="card-text">
            Connection: <span class="badge @(isDbConnected ? "bg-success" : "bg-danger")">
                @(isDbConnected ? "‚úÖ Connected" : "‚ùå Disconnected")
            </span>
        </p>
        <button class="btn btn-sm btn-outline-info" @onclick="TestConnection" disabled="@isLoading">
            üß™ Test Connection
        </button>
    </div>
</div>

<!-- Add New Item Form -->
<div class="card mb-4">
    <div class="card-header">
        <h4>‚ûï Add New Item</h4>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="storeId">Store ID:</label>
                    <input type="text" @bind="newItem.StoreId" class="form-control" placeholder="e.g., STORE001" />
                </div>
                
                <div class="form-group mb-3">
    <label for="productId">Product ID:</label>
    <input type="text" @bind="newItem.ProductId" class="form-control" placeholder="e.g., iphone15" />
</div>
<div class="form-group mb-3">
    <label for="productName">Product Name:</label>
    <input type="text" @bind="newItem.ProductName" class="form-control" placeholder="e.g., iPhone 15" />
</div>
                <div class="form-group mb-3">
                    <label for="category">Category:</label>
                    <input type="text" @bind="newItem.Category" class="form-control" placeholder="e.g., Electronics" />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group mb-3">
                    <label for="currentStock">Current Stock:</label>
                    <input type="number" @bind="newItem.CurrentStock" class="form-control" />
                </div>
                <div class="form-group mb-3">
                    <label for="minimumStock">Minimum Stock:</label>
                    <input type="number" @bind="newItem.MinimumStock" class="form-control" />
                </div>
                <div class="form-group mb-3">
    <label for="pricePoint">Price Point:</label>
    <input type="number" step="0.01" @bind="newItem.PricePoint" class="form-control" />
</div>
            </div>
        </div>
        <button class="btn btn-primary" @onclick="AddItem" disabled="@(isLoading || !isDbConnected)">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            Add Item
        </button>
    </div>
</div>

<!-- Current Inventory -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4>üìã Current Inventory (@items.Count items)</h4>
        <button class="btn btn-outline-primary" @onclick="LoadItems" disabled="@isLoading">
            üîÑ Refresh
        </button>
    </div>
    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center py-4">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading inventory...</p>
            </div>
        }
        else if (items.Count == 0)
        {
            <div class="alert alert-info">
                <h5>üì¶ No items found</h5>
                <p>Add your first inventory item using the form above.</p>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Store ID</th>
                            <th>Product ID</th>
                            <th>Category</th>
                            <th>Current Stock</th>
                            <th>Min Stock</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in items)
                        {
                            <tr class="@GetRowClass(item)">
                                <td>@item.StoreId</td>
                                <td>@item.ProductId</td>
                                <td>
                                    <strong>@item.ProductName</strong><br> <!-- ‚Üê Show ProductName (user-friendly) -->
                                    <small class="text-muted">ID: @item.ProductId</small> <!-- ‚Üê Show ProductId (technical) -->
                                </td>
                                <td>@item.Category</td>
                                <td>
                                    <span class="badge @GetStockBadgeClass(item)">
                                        @item.CurrentStock
                                    </span>
                                </td>
                                <td>@item.MinimumStock</td>
                                <td>$@item.PricePoint.ToString("F2")</td>
                                <td>@GetStockStatus(item)</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteItem(item.Id!)">
                                        üóëÔ∏è Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    private List<InventoryItem> items = new();
    private InventoryItem newItem = new();
    private bool isLoading = false;
    private bool isDbConnected = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("üöÄ Initializing inventory page...");
        await TestConnection();
        await LoadItems();
    }

    private async Task TestConnection()
    {
        try
        {
            Console.WriteLine("üß™ Testing database connection from UI...");
            isDbConnected = await InventoryService.TestConnectionAsync();
            
            if (isDbConnected)
            {
                successMessage = "Database connection successful!";
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Database connection failed!";
                successMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Connection test error: {ex.Message}");
            isDbConnected = false;
            errorMessage = $"Connection test failed: {ex.Message}";
            successMessage = string.Empty;
        }
        StateHasChanged();
    }

    private async Task LoadItems()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Console.WriteLine("üìã Loading items from UI...");
            items = await InventoryService.GetAllAsync();
            Console.WriteLine($"‚úÖ UI loaded {items.Count} items");
            successMessage = $"Loaded {items.Count} items from database";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå UI LoadItems error: {ex.Message}");
            errorMessage = $"Failed to load items: {ex.Message}";
            items = new List<InventoryItem>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(newItem.StoreId) || 
            string.IsNullOrWhiteSpace(newItem.ProductId))
        {
            errorMessage = "Please fill in Store ID and Product ID";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            Console.WriteLine($"‚ûï Adding item from UI: {newItem.ProductId}");
            await InventoryService.CreateAsync(newItem);
            newItem = new InventoryItem(); // Reset form
            successMessage = "Item added successfully!";
            await LoadItems(); // Refresh list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå UI AddItem error: {ex.Message}");
            errorMessage = $"Failed to add item: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteItem(string itemId)
    {
        if (string.IsNullOrEmpty(itemId)) return;

        try
        {
            Console.WriteLine($"üóëÔ∏è Deleting item from UI: {itemId}");
            await InventoryService.DeleteAsync(itemId);
            successMessage = "Item deleted successfully!";
            await LoadItems(); // Refresh list
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå UI DeleteItem error: {ex.Message}");
            errorMessage = $"Failed to delete item: {ex.Message}";
        }
    }

    private void ClearError()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        StateHasChanged();
    }

    // Helper methods remain the same...
    private string GetRowClass(InventoryItem item)
    {
        if (item.CurrentStock <= item.MinimumStock)
            return "table-danger";
        if (item.CurrentStock <= item.MinimumStock * 1.5)
            return "table-warning";
        return "";
    }

    private string GetStockBadgeClass(InventoryItem item)
    {
        if (item.CurrentStock <= item.MinimumStock)
            return "bg-danger";
        if (item.CurrentStock <= item.MinimumStock * 1.5)
            return "bg-warning";
        return "bg-success";
    }

    private string GetStockStatus(InventoryItem item)
    {
        if (item.CurrentStock <= item.MinimumStock)
            return "üö® Low Stock";
        if (item.CurrentStock <= item.MinimumStock * 1.5)
            return "‚ö†Ô∏è Getting Low";
        return "‚úÖ Good";
    }
}